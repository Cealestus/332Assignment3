#include <pthread.h>
#include "dogwashsynch.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/* Locks */
pthread_mutex_t SA;		// lock for type DA
pthread_mutex_t SB;		// lock for type DB
pthread_mutex_t SBAYS;		// lock for BAYS
pthread_mutex_t SNUMBAYS;	// lock for NUMBAYS


/*
 * Function to handle dogs of type A
 * */
void *DogAThread(void *arg){
	// get the lock for SA and increment numDA by 1
	pthread_mutex_lock(&SA);
	numDA++;
	// if numDA is 1 get the lock for SBAYS
	if(numDA == 1){
		pthread_mutex_lock(&SBAYS);
	}
	// unlock SA and get the lock for NUMBAYS
	pthread_mutex_unlock(&SA);
	pthread_mutex_lock(&SNUMBAYS);
	// while numbays is 0 unlock NUMBAYS and lock NUMBAYS
	while(NumBays == 0){
		pthread_mutex_unlock(&SNUMBAYS);
		pthread_mutex_lock(&SNUMBAYS);
	}
	// decrement NumBays by 1 and unlock SNUMBAYS
	NumBays--;
	printf("In DogA\n");
	pthread_mutex_unlock(&SNUMBAYS);
	return 0;
}

/*
 * Function to handle dogs of type B
 */
void *DogBThread(void *arg){
	// get the lock for SB and increment numDB
	pthread_mutex_lock(&SB);
	numDB++;
	// if numDB is 1 get the SBAYS lock
	if(numDB == 1){
		pthread_mutex_lock(&SBAYS);
	}
	// unlock SB and get the lock for NUMBAYS
	pthread_mutex_unlock(&SB);
	pthread_mutex_lock(&SNUMBAYS);
	// whlile NumBays is 0 continuously unlock NUMBAYS and lock it
	while(NumBays == 0){
		pthread_mutex_unlock(&SNUMBAYS);
		pthread_mutex_lock(&SNUMBAYS);
	}
	// decrement NumBays by 1 and unlock the NUMBAYS lock
	NumBays--;
	printf("In DogB\n");
	pthread_mutex_unlock(&SNUMBAYS);
	return 0;
}

/*
 * Function to handle dogs of type O
 */
void *DogOThread(void *arg){
	// get the lock for NUMBAYS
	pthread_mutex_lock(&SNUMBAYS);
	// while the numbays counter is zero unlock the NUMBAYS counter and lock it again
	while(NumBays == 0){
		pthread_mutex_unlock(&SNUMBAYS);
		pthread_mutex_lock(&SNUMBAYS);
	}
	// decrement NumBays and unlock the NUMBAYS lock
	NumBays--;
	printf("In DogO\n");
	pthread_mutex_unlock(&SNUMBAYS);
	return 0;
}

/*
 * This function is called to initialize any variables your
 * solution requires. It takes as its argument the number of wash bays in the dog wash facility. The
 * function should return 0 on success and -1 for a failure return.
 */
int
dogwash_init(int numbays) {
	int check;
	// initialise NumBays to numbays 
	// set all the number to dog types to 0
	NumBays = numbays;
	numDA = 0;
	numDB = 0;
	numDO = 0;
	
	// initialize the mutext locks to start
	// use a check to be sure they worked, return -1 if they failed
	check = pthread_mutex_init(&SA, NULL);
	if(check != 0){
		return -1;
	}
	check = pthread_mutex_init(&SB, NULL);
	if(check != 0){
		return -1;
	}
	check = pthread_mutex_init(&SBAYS, NULL);
	if(check != 0){
		return -1;
	}
	check = pthread_mutex_init(&SNUMBAYS, NULL);
	if(check != 0){
		return -1;
	}

	return 0;
}

/*
 * This function is called when a new dog (of type dogtype)
 * arrives at the dog wash needing a wash. The calling thread should block until the new dog can be
 * allocated a wash bay. The function should return 0 on success and -1 for a failure return.
 */
int 
newdog(dogtype dog) {
	int check;
	// check if the dog is of type DA 
	// use pthread create to create a thread and pthread join
	// check if both worked
	if(dog == DA){
		pthread_t DogA_Thread;
		printf("Creating DogA\n");
		check = pthread_create(&DogA_Thread, NULL, DogAThread, NULL);
		if(check != 0){
			return -1;
		}
		check = pthread_join(DogA_Thread, NULL);
		if(check != 0){
			return -1;
		}
		return 0;
	}
	// if DB tye dog is sent in use pthread create and pthread join
	//  checking if both worked, return -1 if they did not
	else if(dog == DB){
		pthread_t DogB_Thread;
		printf("Creating DogB\n");
		check = pthread_create(&DogB_Thread, NULL, DogBThread, NULL);
		if(check != 0){
			return -1;
		}
		check = pthread_join(DogB_Thread, NULL);
		if(check != 0){
			return -1;
		}
		return 0;
	}
	// if DO type dog is sent in
	// use pthread create to create a thread and use pthread join
	// check if both worked return -1 if they errored
	else if(dog == DO){
		pthread_t DogO_Thread;
		printf("Creating DogO\n");
		check = pthread_create(&DogO_Thread, NULL, DogOThread, NULL);
		if(check != 0){
			return -1;
		}
		check = pthread_join(DogO_Thread, NULL);
		if(check != 0){
			return -1;
		}
		return 0;
	}
	return -1;	
}



/*
 * This function is called when a dog of type dogtype that had
 * been allocated a wash bay is done being washed and the wash bay is now free. The function should
 * return 0 on success and -1 for a failure return.
 */
int 
dogdone(dogtype dog) {
	// if the dog sent in if DA type get the NUMBAYS lock and increment it
	// get the SA lock and decrement numDA 
	if(dog == DA){
		printf("Dogdone A\n");
		pthread_mutex_lock(&SNUMBAYS);
		NumBays++;
		pthread_mutex_unlock(&SNUMBAYS);
		pthread_mutex_lock(&SA);
		numDA--;
		// if numDA is 0 release the SBAYS lock for ther dogs to get in the car wash
		if(numDA == 0){
			pthread_mutex_unlock(&SBAYS);
		}
		// unlock the SA lock
		pthread_mutex_unlock(&SA);
	}
	// if the dog is of type DB get the NUMBAYS lock increment Numbays, unlock the NUMBAYS lock
	else if(dog == DB){
		printf("Dogdone B\n");
		pthread_mutex_lock(&SNUMBAYS);
		NumBays++;

		pthread_mutex_unlock(&SNUMBAYS);
		// get the SB locka nd decrement the numDB 
		pthread_mutex_lock(&SB);		
		numDB--;
		// if numDB is equal to zero release the lock on SBAYS
		if(numDB == 0){
			pthread_mutex_unlock(&SBAYS);
		}
		pthread_mutex_unlock(&SB);
	}
	// else for the dog type DO get the lock on SNUMBAYS and increment NUMBAYS by 1
	// release the SNUMBAYS lock
	else if(dog == DO){
		printf("Dogdone O\n");
		pthread_mutex_lock(&SNUMBAYS);
		NumBays++;
		pthread_mutex_unlock(&SNUMBAYS);
	}
	// else return -1 on error
	else{
		return -1;
	}
	return 0;
}


/*This function is called to perform any required data cleanup actions;
 * after calling this function it should be possible to reinitialize (using dogwash_init()) and make
 * another sequence of calls to newdog() and dogdone(). The function should return 0 on success
 * and -1 for a failure return
 */
int 
dogwash_done() {
	// set all counters to 0 and return
	numDA = 0;
	numDB = 0;
	numDO = 0;

	return 0;
}
